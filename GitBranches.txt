Branch

una rama es una copia del codigo relativa a l punto del commit dondre surge la rama

cada rama tiene y mantiene su propio historial de transacciones (Versiones)

las ramas pueden juntarse, lo que permite trabajar en paralelo .

# tipos de brnaches carpetas
Dinamica, personales de desarrollo 
    Controlada rama develop  donde hago mis cambios
    Estatica  rama master  la que esta en produccion

Las ramas principales son las unicas que estan activas durante todo el proyecto:
MASTER   DEVELOP

No se hacen commits en MASTER, se hacen pocos en DEVELOP se generan más ramas

Feature Branch
Se crea para representar una funcionalidad o caracteristica
Es donde ocurre el trabajo
Nacen de Develop y se juntan con Develop
Se sugiere se nombre [nombre]/[feature]

git branch  lista las ramas que tenemos localmente
git checkout -b nueva_rama   crear una rama
git checkout rama   para cambiarnos de rama
git branch -d rama  para borrar una branch
git branch -D rama forza el borrado de la rama **Cuidado con esta Opcion**
git merge para mesclar los cambios en cada rama

git push origin --delete feature/ejercicio5  (Para borrar el remoto)

merge nos permite combinar automaticamente el trabajo de 2 personas sin nececidad de andar copiando manualmente.

RELEASE brnaches
Salen de Develop
Se nombran release-[version]
    por ejemplo release-1.0
Se ejecutan todas las pruebas
Si pasan las pruebas, la rama se junta con develop y master
La mezcla con master se usa un TAG paea marcar el cambio

HOT FIX
Es un cambio urgente, pequeño, en produccion
Son resultado de un mal aseguramiento de la version
salen de master
se nombran hotfix-[version]

se ejecutan todas las pruebas
Si pasan las pruebas, la rama se junta con develop y master
La mezcla con master se usa un TAG paea marcar el cambio

Pull Request
Pedir revision del codigo para hacer un pull
CODE REVIEW
es una practica preventiva  aseguramiento de la calidad y al mismo tiempo es una practica de transferencia 
se sugiere revisar varias veces el codigo con ayuda de una checklist, revisando un solo aspecto en cada pasada
Posteriormente un compañero lo deve revisar yu aprobar.

Code checklist
Se sugiere almenos revisar:
Convenciones de estilo de variables funciones y comentarios


CONTINUOS INTEGRATION
Todos trabajan sobre un mismo proyecto, hacen cambios y todo esta bien integrado

Principios de mejora continua
Mejorar el flujo de valor
Reducir los ciclos de retroalimentacion
Experimentacion y aprendizaje continuos 

Que se requiere para CI
control de versiones
-compilacion o integracion automatica
Acuerdo de equipo en cuCM)
    cuidadosa, incluyendo dependencias, librerias y un ambiente de desarrollo similar al de produccion.
    
Jenkings
